/**
 * Generated by Apache Royale Compiler from org\apache\royale\states\AddItems.as
 * org.apache.royale.states.AddItems
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.royale.states.AddItems');

goog.require('org.apache.royale.states.ItemAndDescriptor');
goog.require('org.apache.royale.core.IDocument');
goog.require('org.apache.royale.utils.Language');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 9
 *  @playerversion AIR 1.1
 *  @productversion Royale 1.0.0
 * @constructor
 * @implements {org.apache.royale.core.IDocument}
 */
org.apache.royale.states.AddItems = function() {
  ;
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.states.AddItems', org.apache.royale.states.AddItems);


/**
 * @export
 * @type {Array}
 */
org.apache.royale.states.AddItems.prototype.items;


/**
 * @export
 * @type {number}
 */
org.apache.royale.states.AddItems.prototype.itemsDescriptorIndex = 0;


/**
 * @export
 * @type {org.apache.royale.states.ItemAndDescriptor}
 */
org.apache.royale.states.AddItems.prototype.itemsDescriptor;


/**
 * @export
 * @type {string}
 */
org.apache.royale.states.AddItems.prototype.destination;


/**
 * @export
 * @type {string}
 */
org.apache.royale.states.AddItems.prototype.propertyName;


/**
 * @export
 * @type {string}
 */
org.apache.royale.states.AddItems.prototype.position;


/**
 * @export
 * @type {string}
 */
org.apache.royale.states.AddItems.prototype.relativeTo;


/**
 * @export
 * @type {Object}
 */
org.apache.royale.states.AddItems.prototype.document;


/**
 * @export
 * @param {Object} document
 * @param {string=} id
 */
org.apache.royale.states.AddItems.prototype.setDocument = function(document, id) {
  id = typeof id !== 'undefined' ? id : null;
  this.document = document;
  var /** @type {Object} */ data = document.mxmlsd[this.itemsDescriptorIndex];
  if (org.apache.royale.utils.Language.is(data, Array)) {
    this.itemsDescriptor = new org.apache.royale.states.ItemAndDescriptor();
    this.itemsDescriptor.descriptor = org.apache.royale.utils.Language.as(data, Array);
    document.mxmlsd[this.itemsDescriptorIndex] = this.itemsDescriptor;
  }
  else
    this.itemsDescriptor = org.apache.royale.utils.Language.as(data, org.apache.royale.states.ItemAndDescriptor);
};


/**
 * @asprivate 
 * Initialize this object from a descriptor.
 * @export
 * @param {Object} properties
 * @return {Object}
 */
org.apache.royale.states.AddItems.prototype.initializeFromObject = function(properties) {
  for (var /** @type {string} */ p in properties) {
    this[p] = properties[p];
  }
  return Object(this);
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.states.AddItems.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'AddItems', qName: 'org.apache.royale.states.AddItems', kind: 'class' }], interfaces: [org.apache.royale.core.IDocument] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.states.AddItems.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
        'items': { type: 'Array'},
        'itemsDescriptorIndex': { type: 'int'},
        'itemsDescriptor': { type: 'org.apache.royale.states.ItemAndDescriptor'},
        'destination': { type: 'String'},
        'propertyName': { type: 'String'},
        'position': { type: 'String'},
        'relativeTo': { type: 'String'},
        'document': { type: 'Object'}
      };
    },
    accessors: function () {return {};},
    methods: function () {
      return {
        'AddItems': { type: '', declaredBy: 'org.apache.royale.states.AddItems'},
        'setDocument': { type: 'void', declaredBy: 'org.apache.royale.states.AddItems', parameters: function () { return [  { index: 1, type: 'Object', optional: false },{ index: 2, type: 'String', optional: true } ]; }},
        'initializeFromObject': { type: 'Object', declaredBy: 'org.apache.royale.states.AddItems', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }}
      };
    },
    metadata: function () { return [  ]; }
  };
};