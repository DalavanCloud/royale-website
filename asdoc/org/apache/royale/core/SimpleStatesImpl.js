/**
 * Generated by Apache Royale Compiler from org\apache\royale\core\SimpleStatesImpl.as
 * org.apache.royale.core.SimpleStatesImpl
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('org.apache.royale.core.SimpleStatesImpl');

goog.require('org.apache.royale.core.IContainer');
goog.require('org.apache.royale.core.IStatesObject');
goog.require('org.apache.royale.events.Event');
goog.require('org.apache.royale.events.EventDispatcher');
goog.require('org.apache.royale.events.IEventDispatcher');
goog.require('org.apache.royale.events.ValueChangeEvent');
goog.require('org.apache.royale.states.AddItems');
goog.require('org.apache.royale.states.SetEventHandler');
goog.require('org.apache.royale.states.SetProperty');
goog.require('org.apache.royale.utils.MXMLDataInterpreter');
goog.require('org.apache.royale.core.IBead');
goog.require('org.apache.royale.core.IStatesImpl');
goog.require('org.apache.royale.utils.Language');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion Royale 0.0
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.core.IStatesImpl}
 * @implements {org.apache.royale.core.IBead}
 */
org.apache.royale.core.SimpleStatesImpl = function() {
  org.apache.royale.core.SimpleStatesImpl.base(this, 'constructor');
};
goog.inherits(org.apache.royale.core.SimpleStatesImpl, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('org.apache.royale.core.SimpleStatesImpl', org.apache.royale.core.SimpleStatesImpl);


/**
 * @private
 * @type {org.apache.royale.core.IStrand}
 */
org.apache.royale.core.SimpleStatesImpl.prototype._strand;


/**
 * @private
 * @type {boolean}
 */
org.apache.royale.core.SimpleStatesImpl.prototype.sawInitComplete;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
org.apache.royale.core.SimpleStatesImpl.prototype.initialStateHandler = function(event) {
  this.sawInitComplete = true;
  this.stateChangeHandler(new org.apache.royale.events.ValueChangeEvent("currentStateChange", false, false, null, org.apache.royale.utils.Language.as(this._strand, org.apache.royale.core.IStatesObject, true).currentState));
};


/**
 * @royaleignorecoercion org.apache.royale.core.IStatesObject 
 * @private
 * @param {org.apache.royale.events.ValueChangeEvent} event
 */
org.apache.royale.core.SimpleStatesImpl.prototype.stateChangeHandler = function(event) {
  if (!this.sawInitComplete)
    return;
  var /** @type {Object} */ doc = this._strand;
  var /** @type {Array} */ arr = doc.states;
  var foreachiter0_target = arr;
  for (var foreachiter0 in foreachiter0_target) 
  {
  var s = foreachiter0_target[foreachiter0];
  {
    if (s.name == event.oldValue) {
      this.revert(s);
      break;
    }
  }}
  
  var foreachiter1_target = arr;
  for (var foreachiter1 in foreachiter1_target) 
  {
  s = foreachiter1_target[foreachiter1];
  {
    if (s.name == event.newValue) {
      this.apply(s);
      break;
    }
  }}
  
  doc.dispatchEvent(new org.apache.royale.events.Event("stateChangeComplete"));
};


/**
 * @royaleignorecoercion org.apache.royale.core.IParent
 * @private
 * @param {org.apache.royale.states.State} s
 */
org.apache.royale.core.SimpleStatesImpl.prototype.revert = function(s) {
  var /** @type {Array} */ arr = s.overrides;
  var foreachiter2_target = arr;
  for (var foreachiter2 in foreachiter2_target) 
  {
  var o = foreachiter2_target[foreachiter2];
  {
    if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.AddItems)) {
      var /** @type {org.apache.royale.states.AddItems} */ ai = org.apache.royale.utils.Language.as(o, org.apache.royale.states.AddItems, true);
      var foreachiter3_target = ai.items;
      for (var foreachiter3 in foreachiter3_target) 
      {
      var item = foreachiter3_target[foreachiter3];
      {
        var /** @type {Object} */ parent = item.parent;
        if (parent) {
          parent.removeElement(item);
        }
      }}
      
      if (org.apache.royale.utils.Language.is(parent, org.apache.royale.core.IContainer))
        org.apache.royale.utils.Language.as(parent, org.apache.royale.core.IContainer, true).childrenAdded();
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetProperty)) {
      var /** @type {org.apache.royale.states.SetProperty} */ sp = org.apache.royale.utils.Language.as(o, org.apache.royale.states.SetProperty, true);
      if (sp.target != null)
        sp.document[sp.target][sp.name] = sp.previousValue;
      else
        sp.document[sp.name] = sp.previousValue;
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetEventHandler)) {
      var /** @type {org.apache.royale.states.SetEventHandler} */ seh = org.apache.royale.utils.Language.as(o, org.apache.royale.states.SetEventHandler, true);
      if (seh.target != null) {
        seh.document[seh.target].removeEventListener(seh.name, seh.handlerFunction);
      } else {
        seh.document.removeEventListener(seh.name, seh.handlerFunction);
      }
    }
  }}
  
};


/**
 * @royaleignorecoercion org.apache.royale.core.IChild 
 * @royaleignorecoercion org.apache.royale.core.IParent
 * @royaleignorecoercion Array
 * @private
 * @param {org.apache.royale.states.State} s
 */
org.apache.royale.core.SimpleStatesImpl.prototype.apply = function(s) {
  var /** @type {Array} */ arr = s.overrides;
  var foreachiter4_target = arr;
  for (var foreachiter4 in foreachiter4_target) 
  {
  var o = foreachiter4_target[foreachiter4];
  {
    if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.AddItems)) {
      var /** @type {org.apache.royale.states.AddItems} */ ai = org.apache.royale.utils.Language.as(o, org.apache.royale.states.AddItems, true);
      if (ai.items == null) {
        ai.items = ai.itemsDescriptor.items;
        if (ai.items == null) {
          ai.items = org.apache.royale.utils.MXMLDataInterpreter.generateMXMLArray(ai.document, null, ai.itemsDescriptor.descriptor);
          ai.itemsDescriptor.items = ai.items;
        }
      }
      var foreachiter5_target = ai.items;
      for (var foreachiter5 in foreachiter5_target) 
      {
      var item = foreachiter5_target[foreachiter5];
      {
        var /** @type {Object} */ parent = ai.document;
        if (ai.destination != null)
          parent = parent[ai.destination];
        if (ai.relativeTo != null) {
          var /** @type {Object} */ child = ai.document[ai.relativeTo];
          if (ai.destination == null)
            parent = child.parent;
          var /** @type {number} */ index = parent.getElementIndex(child);
          if (ai.position == "after")
            index++;
          parent.addElementAt(item, index);
        } else if (ai.position == "first") {
          parent.addElementAt(item, 0);
        } else {
          parent.addElement(item);
        }
      }}
      
      if (org.apache.royale.utils.Language.is(parent, org.apache.royale.core.IContainer))
        org.apache.royale.utils.Language.as(parent, org.apache.royale.core.IContainer, true).childrenAdded();
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetProperty)) {
      var /** @type {org.apache.royale.states.SetProperty} */ sp = org.apache.royale.utils.Language.as(o, org.apache.royale.states.SetProperty, true);
      if (sp.target != null) {
        sp.previousValue = sp.document[sp.target][sp.name];
        sp.document[sp.target][sp.name] = sp.value;
      } else {
        sp.previousValue = sp.document[sp.name];
        sp.document[sp.name] = sp.value;
      }
    } else if (org.apache.royale.utils.Language.is(o, org.apache.royale.states.SetEventHandler)) {
      var /** @type {org.apache.royale.states.SetEventHandler} */ seh = org.apache.royale.utils.Language.as(o, org.apache.royale.states.SetEventHandler, true);
      if (seh.target != null) {
        seh.document[seh.target].addEventListener(seh.name, seh.handlerFunction);
      } else {
        seh.document.addEventListener(seh.name, seh.handlerFunction);
      }
    }
  }}
  
};


org.apache.royale.core.SimpleStatesImpl.prototype.set__strand = function(value) {
  this._strand = value;
  org.apache.royale.utils.Language.as(this._strand, org.apache.royale.events.IEventDispatcher, true).addEventListener("currentStateChange", org.apache.royale.utils.Language.closure(this.stateChangeHandler, this, 'stateChangeHandler'));
  org.apache.royale.utils.Language.as(this._strand, org.apache.royale.events.IEventDispatcher, true).addEventListener("initComplete", org.apache.royale.utils.Language.closure(this.initialStateHandler, this, 'initialStateHandler'));
};


Object.defineProperties(org.apache.royale.core.SimpleStatesImpl.prototype, /** @lends {org.apache.royale.core.SimpleStatesImpl.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: org.apache.royale.core.SimpleStatesImpl.prototype.set__strand}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.royale.core.SimpleStatesImpl.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'SimpleStatesImpl', qName: 'org.apache.royale.core.SimpleStatesImpl', kind: 'class' }], interfaces: [org.apache.royale.core.IStatesImpl, org.apache.royale.core.IBead] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
org.apache.royale.core.SimpleStatesImpl.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'org.apache.royale.core.SimpleStatesImpl'}
      };
    },
    methods: function () {
      return {
        'SimpleStatesImpl': { type: '', declaredBy: 'org.apache.royale.core.SimpleStatesImpl'}
      };
    }
  };
};