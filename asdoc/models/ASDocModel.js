/**
 * Generated by Apache Royale Compiler from models\ASDocModel.as
 * models.ASDocModel
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('models.ASDocModel');

goog.require('org.apache.royale.events.Event');
goog.require('org.apache.royale.events.EventDispatcher');
goog.require('valueObjects.DataVO');
goog.require('org.apache.royale.core.IBeadModel');
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 * @extends {org.apache.royale.events.EventDispatcher}
 * @implements {org.apache.royale.core.IBeadModel}
 */
models.ASDocModel = function() {
  models.ASDocModel.base(this, 'constructor');
};
goog.inherits(models.ASDocModel, org.apache.royale.events.EventDispatcher);


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('models.ASDocModel', models.ASDocModel);


/**
 * @private
 * @type {ASDoc}
 */
models.ASDocModel.prototype.app;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.initializeHandler = function(event) {
  this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.configCompleteHandler, this, 'configCompleteHandler'));
  this.app.service.url = "config.json";
  this.app.service.send();
};


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.tagNameMap;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._knownTags;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.configCompleteHandler = function(event) {
  this.app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.configCompleteHandler, this, 'configCompleteHandler'));
  var /** @type {Object} */ config = JSON.parse(this.app.service.data);
  this.tagNameMap = config["tagNames"];
  this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.tagsCompleteHandler, this, 'tagsCompleteHandler'));
  this.app.service.url = "tags.json";
  this.app.service.send();
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.tagsCompleteHandler = function(event) {
  this.app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.tagsCompleteHandler, this, 'tagsCompleteHandler'));
  var /** @type {Object} */ config = JSON.parse(this.app.service.data);
  this._knownTags = config["tags"];
  this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.completeHandler, this, 'completeHandler'));
  this.app.service.url = "classlist.json";
  this.app.service.send();
};


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.masterData;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.completeHandler = function(event) {
  this.app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.completeHandler, this, 'completeHandler'));
  this.masterData = JSON.parse(this.app.service.data);
  this.filterPackageList();
};


/**
 * @private
 */
models.ASDocModel.prototype.filterPackageList = function() {
  var /** @type {Object} */ packages = {};
  var foreachiter0_target = this.masterData["classnames"];
  for (var foreachiter0 in foreachiter0_target) 
  {
  var qname = foreachiter0_target[foreachiter0];
  {
    var /** @type {string} */ packageName;
    var /** @type {number} */ c = qname.lastIndexOf(".");
    if (c == -1)
      packageName = "Top Level"; else {
      packageName = qname.substr(0, c);
      qname = qname.substr(c + 1);
    }
    if (packages[packageName] == null) {
      packages[packageName] = {};
    }
    packages[packageName][qname] = {};
  }}
  
  var /** @type {Array} */ arr = [];
  for (var /** @type {string} */ p in packages) {
    if (this.filter == null)
      arr.push(p);
    else if (this.filterPackage(p))
      arr.push(p);
  }
  arr.sort();
  this._packageList = arr;
  this.allPackages = packages;
  this.dispatchEvent(new org.apache.royale.events.Event("packageListChanged"));
};


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype.allPackages;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._packageList;


/**
 * @private
 * @type {string}
 */
models.ASDocModel.prototype._currentPackage;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._classList;


/**
 * @private
 * @type {string}
 */
models.ASDocModel.prototype._currentClass;


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype._currentClassData;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._baseClassList;


/**
 * @private
 * @type {Object}
 */
models.ASDocModel.prototype._attributesMap;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.completeClassHandler = function(event) {
  this.app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.completeClassHandler, this, 'completeClassHandler'));
  var /** @type {valueObjects.DataVO} */ data = new valueObjects.DataVO(JSON.parse(this.app.service.data));
  if (this._currentClassData == null) {
    this._currentClassData = data;
    this._publicProperties = [];
    this._publicMethods = [];
    this._publicEvents = [];
    this._constructorList = [];
    this._baseClassList = [];
    this._inheritance = null;
    this._attributesMap = {};
    this._attributes = null;
  }
  else
    this._baseClassList.push(data.qname);
  var foreachiter1_target = data.members;
  for (var foreachiter1 in foreachiter1_target) 
  {
  var m = foreachiter1_target[foreachiter1];
  {
    m.shortDescription = this.makeShortDescription(m.description);
    if (m.type == "method") {
      if (m.qname == this._currentPackage + "." + this._currentClass) {
        this._constructorList.push(m);
      }
      else if (m.qname != data.qname)
        this.addIfNeededAndMakeAttributes(this._publicMethods, m);
    } else {
      this.addIfNeededAndMakeAttributes(this._publicProperties, m);
    }
    if (this.masterData["classnames"].indexOf(m.return) != -1) {
      var /** @type {string} */ href = org.apache.royale.utils.Language.string(m.return);
      var /** @type {number} */ c = href.lastIndexOf(".");
      if (c != -1) {
        m.return = href.substr(c + 1);
        href = href.substr(0, c) + "/" + href.substr(c + 1);
      }
      m.returnhref = "#!" + href;
    }
  }}
  
  var foreachiter2_target = data.events;
  for (var foreachiter2 in foreachiter2_target) 
  {
  m = foreachiter2_target[foreachiter2];
  {
    m.shortDescription = this.makeShortDescription(m.description);
    this.addIfNeededAndMakeAttributes(this._publicEvents, m);
    if (this.masterData["classnames"].indexOf(m.type) != -1) {
      href = org.apache.royale.utils.Language.string(m.type);
      c = href.lastIndexOf(".");
      if (c != -1) {
        m.type = href.substr(c + 1);
        href = href.substr(0, c) + "/" + href.substr(c + 1);
      }
      m.typehref = "#!" + href;
    }
  }}
  
  var foreachiter3_target = data.tags;
  for (var foreachiter3 in foreachiter3_target) 
  {
  m = foreachiter3_target[foreachiter3];
  {
    if (!this._attributesMap[m.tagName]) {
      this._attributesMap[m.tagName] = m.values;
    }
  }}
  
  if (data.type == "class" && data.baseClassname && data.baseClassname.indexOf("flash.") != 0 && data.baseClassname.indexOf("goog.") != 0) {
    this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.completeClassHandler, this, 'completeClassHandler'));
    this.app.service.url = this.computeFileName(data.baseClassname);
    this.app.service.send();
  } else if (data.type == "interface" && data.baseInterfaceNames && data.baseInterfaceNames[0].indexOf("flash.") != 0 && data.baseInterfaceNames[0].indexOf("goog.") != 0) {
    this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.completeInterfaceHandler, this, 'completeInterfaceHandler'));
    this.extensions = data.baseInterfaceNames;
    this.app.service.url = this.computeFileName(data.baseInterfaceNames[0]);
    this.app.service.send();
  } else {
    org.apache.royale.utils.Language.sortOn(this._publicMethods, "qname");
    org.apache.royale.utils.Language.sortOn(this._publicEvents, "qname");
    org.apache.royale.utils.Language.sortOn(this._publicProperties, "qname");
    this.dispatchEvent(new org.apache.royale.events.Event("currentDataChanged"));
  }
};


/**
 * @private
 * @param {Array} arr
 * @param {Object} data
 */
models.ASDocModel.prototype.addIfNeededAndMakeAttributes = function(arr, data) {
  var /** @type {number} */ n = arr.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {Object} */ obj = arr[i];
    if (obj.qname == data.qname) {
      if (obj.description == "" && data.description != "") {
        this.addAttributes(data, data);
        arr.splice(i, 1, data);
      } else {
        this.addAttributes(obj, data);
      }
      return;
    }
  }
  this.addAttributes(data, data);
  if (data.type == "method") {
    this.processParams(data);
  }
  data.ownerhref = this.currentPackage + "/" + this.currentClass;
  arr.push(data);
};


/**
 * @private
 * @param {Object} dest
 * @param {Object} src
 */
models.ASDocModel.prototype.addAttributes = function(dest, src) {
  if (!src.tags)
    return;
  var /** @type {Array} */ arr;
  if (!dest.attributes) {
    dest.attributes = [];
  }
  arr = dest.attributes;
  var /** @type {Object} */ map = {};
  var /** @type {Object} */ tag;
  var /** @type {number} */ n = arr.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    tag = arr[i];
    map[tag.name] = tag.value;
  }
  n = Number(src.tags.length);
  for (i = 0; i < n; i++) {
    tag = src.tags[i];
    if (map[tag.tagName])
      continue;
    var /** @type {Object} */ obj = {};
    var /** @type {string} */ k = org.apache.royale.utils.Language.string(this.tagNameMap[tag.tagName]);
    if (k != null)
      obj.name = k;
    else
      obj.name = tag.tagName;
    var /** @type {string} */ s = "";
    var /** @type {boolean} */ firstOne = true;
    var /** @type {Array} */ o = tag.values;
    var foreachiter4_target = o;
    for (var foreachiter4 in foreachiter4_target) 
    {
    var q = foreachiter4_target[foreachiter4];
    {
      if (!firstOne)
        s += ", ";
      firstOne = false;
      s += q;
    }}
    
    if (map[obj.name]) {
      map[obj.name].value += "," + s;
    } else {
      obj.value = s;
      arr.push(obj);
    }
  }
};


/**
 * @private
 * @param {Object} data
 */
models.ASDocModel.prototype.processParams = function(data) {
  var /** @type {number} */ n = Number(data.params.length);
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {Object} */ param = data.params[i];
    if (this.masterData["classnames"].indexOf(param.type) != -1) {
      var /** @type {string} */ href = org.apache.royale.utils.Language.string(param.type);
      var /** @type {number} */ c = href.lastIndexOf(".");
      if (c != -1) {
        param.type = href.substr(c + 1);
        href = href.substr(0, c) + "/" + href.substr(c + 1);
      }
      param.typehref = "#!" + href;
    }
  }
};


/**
 * @private
 * @param {string} input
 * @return {string}
 */
models.ASDocModel.prototype.computeFileName = function(input) {
  return input.replace(new RegExp("\\.", "g"), "/") + ".json";
};


/**
 * @private
 * @param {string} input
 * @return {string}
 */
models.ASDocModel.prototype.makeShortDescription = function(input) {
  if (!input)
    return "";
  var /** @type {number} */ c = input.indexOf(".");
  if (c == -1)
    return input;
  return input.substr(0, c + 1);
};


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype.extensions;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
models.ASDocModel.prototype.completeInterfaceHandler = function(event) {
  this.app.service.removeEventListener("complete", org.apache.royale.utils.Language.closure(this.completeInterfaceHandler, this, 'completeInterfaceHandler'));
  var /** @type {valueObjects.DataVO} */ data = new valueObjects.DataVO(JSON.parse(this.app.service.data));
  if (this._currentClassData == null) {
    this._currentClassData = data;
    this._publicProperties = [];
    this._publicMethods = [];
    this._publicEvents = [];
    this._constructorList = [];
    this._baseClassList = [];
    this._inheritance = null;
    this._attributesMap = {};
    this._attributes = null;
  }
  else
    this._baseClassList.push(data.qname);
  var foreachiter5_target = data.members;
  for (var foreachiter5 in foreachiter5_target) 
  {
  var m = foreachiter5_target[foreachiter5];
  {
    m.shortDescription = this.makeShortDescription(m.description);
    if (m.type == "method") {
      if (m.qname == this._currentPackage + "." + this._currentClass) {
        this._constructorList.push(m);
      }
      else if (m.qname != data.qname)
        this.addIfNeededAndMakeAttributes(this._publicMethods, m);
    } else {
      this.addIfNeededAndMakeAttributes(this._publicProperties, m);
    }
  }}
  
  var foreachiter6_target = data.events;
  for (var foreachiter6 in foreachiter6_target) 
  {
  m = foreachiter6_target[foreachiter6];
  {
    m.shortDescription = this.makeShortDescription(m.description);
    this.addIfNeededAndMakeAttributes(this._publicEvents, m);
    if (this.masterData["classnames"].indexOf(m.type) != -1) {
      var /** @type {string} */ href = org.apache.royale.utils.Language.string(m.type);
      var /** @type {number} */ c = href.lastIndexOf(".");
      if (c != -1) {
        m.type = href.substr(c + 1);
        href = href.substr(0, c) + "/" + href.substr(c + 1);
      }
      m.typehref = "#!" + href;
    }
  }}
  
  var foreachiter7_target = data.tags;
  for (var foreachiter7 in foreachiter7_target) 
  {
  m = foreachiter7_target[foreachiter7];
  {
    if (!this._attributesMap[m.tagName]) {
      this._attributesMap[m.tagName] = m.values;
    }
  }}
  
  if (data.baseInterfaceNames)
    this.extensions = this.extensions.concat(data.baseInterfaceNames);
  while (this.extensions.length && this.extensions[0].indexOf("flash.") == 0)
    this.extensions.shift();
  if (this.extensions.length) {
    this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.completeInterfaceHandler, this, 'completeInterfaceHandler'));
    this.app.service.url = this.computeFileName(this.extensions.shift());
    this.app.service.send();
  } else {
    org.apache.royale.utils.Language.sortOn(this._publicMethods, "qname");
    org.apache.royale.utils.Language.sortOn(this._publicEvents, "qname");
    org.apache.royale.utils.Language.sortOn(this._publicProperties, "qname");
    this.dispatchEvent(new org.apache.royale.events.Event("currentDataChanged"));
  }
};


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._publicProperties;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._publicMethods;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._constructorList;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._publicEvents;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._inheritance;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._attributes;


/**
 * @export
 * @param {string} p
 * @return {boolean}
 */
models.ASDocModel.prototype.filterPackage = function(p) {
  var /** @type {Object} */ packageData = this.allPackages[p];
  for (var /** @type {string} */ pd in packageData) {
    if (this.filter(packageData[pd]))
      return true;
  }
  return false;
};


/**
 * @private
 * @type {Function}
 */
models.ASDocModel.prototype.filter;


/**
 * @private
 * @type {Array}
 */
models.ASDocModel.prototype._filterTags;


/**
 * @export
 * @param {Object} classData
 * @return {boolean}
 */
models.ASDocModel.prototype.filterByTags = function(classData) {
  var /** @type {Array} */ tags = classData.tags;
  if (!tags)
    return false;
  var foreachiter8_target = tags;
  for (var foreachiter8 in foreachiter8_target) 
  {
  var tag = foreachiter8_target[foreachiter8];
  {
    var foreachiter9_target = this.filterTags;
    for (var foreachiter9 in foreachiter9_target) 
    {
    var obj = foreachiter9_target[foreachiter9];
    {
      if (obj.name == tag.tagName) {
        if (tag.values == null || tag.values.length == 0)
          return true;
        var foreachiter10_target = tag.values;
        for (var foreachiter10 in foreachiter10_target) 
        {
        var v = foreachiter10_target[foreachiter10];
        {
          if (v == obj.value)
            return true;
        }}
        
      }
    }}
    
  }}
  
  return false;
};


models.ASDocModel.prototype.set__strand = function(value) {
  this.app = value;
  this.app.addEventListener("initialize", org.apache.royale.utils.Language.closure(this.initializeHandler, this, 'initializeHandler'));
};


models.ASDocModel.prototype.get__knownTags = function() {
  return this._knownTags;
};


models.ASDocModel.prototype.get__allClasses = function() {
  return this.masterData["classnames"];
};


models.ASDocModel.prototype.get__packageList = function() {
  return this._packageList;
};


models.ASDocModel.prototype.get__currentPackage = function() {
  return this._currentPackage;
};


models.ASDocModel.prototype.set__currentPackage = function(value) {
  if (value != this._currentPackage) {
    this._currentPackage = value;
    var /** @type {Object} */ packageData = this.allPackages[value];
    var /** @type {Array} */ arr = [];
    for (var /** @type {string} */ p in packageData) {
      if (this.filter == null)
        arr.push({label:p, href:value + "/" + p});
      else if (this.filter(packageData[p]))
        arr.push({label:p, href:value + "/" + p});
    }
    arr.sort();
    this._classList = arr;
    this.dispatchEvent(new org.apache.royale.events.Event("currentPackageChanged"));
  }
};


models.ASDocModel.prototype.get__classList = function() {
  return this._classList;
};


models.ASDocModel.prototype.get__currentClass = function() {
  return this._currentClass;
};


models.ASDocModel.prototype.set__currentClass = function(value) {
  if (value != this._currentClass) {
    this._currentClass = value;
    var /** @type {Object} */ packageData = this.allPackages[this._currentPackage];
    this.dispatchEvent(new org.apache.royale.events.Event("currentClassChanged"));
    this.app.service.addEventListener("complete", org.apache.royale.utils.Language.closure(this.completeClassHandler, this, 'completeClassHandler'));
    this.app.service.url = this.computeFileName(this._currentPackage + "." + this._currentClass);
    this.app.service.send();
    this._currentClassData = null;
  }
};


models.ASDocModel.prototype.get__publicProperties = function() {
  return this._publicProperties;
};


models.ASDocModel.prototype.get__publicMethods = function() {
  return this._publicMethods;
};


models.ASDocModel.prototype.get__constructorList = function() {
  return this._constructorList;
};


models.ASDocModel.prototype.get__publicEvents = function() {
  return this._publicEvents;
};


models.ASDocModel.prototype.get__description = function() {
  return this._currentClassData.description;
};


models.ASDocModel.prototype.get__inheritance = function() {
  if (!this._inheritance) {
    var /** @type {Array} */ s;
    if (this._baseClassList.length == 0)
      s = [{label:this.currentClass}, {label:"Object"}]; else {
      s = [{label:this.currentClass}];
      var foreachiter11_target = this._baseClassList;
      for (var foreachiter11 in foreachiter11_target) 
      {
      var p = foreachiter11_target[foreachiter11];
      {
        var /** @type {string} */ end = p;
        var /** @type {number} */ c = end.lastIndexOf(".");
        if (c != -1)
          end = end.substr(c + 1);
        var /** @type {Object} */ data = {label:end};
        if (this.masterData["classnames"].indexOf(p) != -1) {
          c = p.lastIndexOf(".");
          if (c != -1) {
            p = p.substr(0, c) + "/" + p.substr(c + 1);
          } else {
            p = "/" + p;
          }
          data.href = p;
        }
        s.push(data);
      }}
      
    }
    this._inheritance = s;
  }
  return this._inheritance;
};


models.ASDocModel.prototype.get__attributes = function() {
  if (!this._attributes) {
    this._attributes = [];
    for (var /** @type {string} */ p in this._attributesMap) {
      var /** @type {Object} */ obj = {};
      var /** @type {Array} */ o = this._attributesMap[p];
      var /** @type {string} */ k = org.apache.royale.utils.Language.string(this.tagNameMap[p]);
      if (k != null)
        obj.name = k;
      else
        obj.name = p;
      var /** @type {string} */ s = "";
      var /** @type {boolean} */ firstOne = true;
      var /** @type {string} */ joiner = ", ";
      if (p == "commentary")
        joiner = "  ";
      if (p == "example") {
        joiner = "<br/>";
        firstOne = false;
      }
      var foreachiter12_target = o;
      for (var foreachiter12 in foreachiter12_target) 
      {
      var q = foreachiter12_target[foreachiter12];
      {
        if (!firstOne)
          s += joiner;
        firstOne = false;
        s += q;
      }}
      
      obj.value = s;
      this._attributes.push(obj);
    }
  }
  return this._attributes;
};


models.ASDocModel.prototype.get__filterTags = function() {
  return this._filterTags;
};


models.ASDocModel.prototype.set__filterTags = function(value) {
  this._filterTags = value;
  if (this._filterTags)
    this.filter = org.apache.royale.utils.Language.closure(this.filterByTags, this, 'filterByTags');
  else
    this.filter = null;
  this.filterPackageList();
};


Object.defineProperties(models.ASDocModel.prototype, /** @lends {models.ASDocModel.prototype} */ {
/**
  * @export
  * @type {org.apache.royale.core.IStrand} */
strand: {
set: models.ASDocModel.prototype.set__strand},
/**
  * @export
  * @type {Array} */
knownTags: {
get: models.ASDocModel.prototype.get__knownTags},
/**
  * @export
  * @type {Array} */
allClasses: {
get: models.ASDocModel.prototype.get__allClasses},
/**
  * @export
  * @type {Array} */
packageList: {
get: models.ASDocModel.prototype.get__packageList},
/**
  * @export
  * @type {string} */
currentPackage: {
get: models.ASDocModel.prototype.get__currentPackage,
set: models.ASDocModel.prototype.set__currentPackage},
/**
  * @export
  * @type {Array} */
classList: {
get: models.ASDocModel.prototype.get__classList},
/**
  * @export
  * @type {string} */
currentClass: {
get: models.ASDocModel.prototype.get__currentClass,
set: models.ASDocModel.prototype.set__currentClass},
/**
  * @export
  * @type {Array} */
publicProperties: {
get: models.ASDocModel.prototype.get__publicProperties},
/**
  * @export
  * @type {Array} */
publicMethods: {
get: models.ASDocModel.prototype.get__publicMethods},
/**
  * @export
  * @type {Array} */
constructorList: {
get: models.ASDocModel.prototype.get__constructorList},
/**
  * @export
  * @type {Array} */
publicEvents: {
get: models.ASDocModel.prototype.get__publicEvents},
/**
  * @export
  * @type {string} */
description: {
get: models.ASDocModel.prototype.get__description},
/**
  * @export
  * @type {Array} */
inheritance: {
get: models.ASDocModel.prototype.get__inheritance},
/**
  * @export
  * @type {Array} */
attributes: {
get: models.ASDocModel.prototype.get__attributes},
/**
  * @export
  * @type {Array} */
filterTags: {
get: models.ASDocModel.prototype.get__filterTags,
set: models.ASDocModel.prototype.set__filterTags}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
models.ASDocModel.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ASDocModel', qName: 'models.ASDocModel', kind: 'class' }], interfaces: [org.apache.royale.core.IBeadModel] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
models.ASDocModel.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'strand': { type: 'org.apache.royale.core.IStrand', access: 'writeonly', declaredBy: 'models.ASDocModel'},
        'knownTags': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'allClasses': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel'},
        'packageList': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'currentPackage': { type: 'String', access: 'readwrite', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'classList': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'currentClass': { type: 'String', access: 'readwrite', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'publicProperties': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'publicMethods': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'constructorList': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'publicEvents': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'description': { type: 'String', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'inheritance': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'attributes': { type: 'Array', access: 'readonly', declaredBy: 'models.ASDocModel', metadata: function () { return [  ]; }},
        'filterTags': { type: 'Array', access: 'readwrite', declaredBy: 'models.ASDocModel'}
      };
    },
    methods: function () {
      return {
        'ASDocModel': { type: '', declaredBy: 'models.ASDocModel'},
        'filterPackage': { type: 'Boolean', declaredBy: 'models.ASDocModel', parameters: function () { return [  { index: 1, type: 'String', optional: false } ]; }},
        'filterByTags': { type: 'Boolean', declaredBy: 'models.ASDocModel', parameters: function () { return [  { index: 1, type: 'Object', optional: false } ]; }}
      };
    }
  };
};