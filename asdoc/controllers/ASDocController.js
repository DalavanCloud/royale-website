/**
 * Generated by Apache Royale Compiler from controllers\ASDocController.as
 * controllers.ASDocController
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('controllers.ASDocController');

goog.require('org.apache.royale.core.IDocument');
goog.require('org.apache.royale.utils.Language');



/**
 * @constructor
 * @implements {org.apache.royale.core.IDocument}
 * @param {org.apache.royale.core.Application=} app
 */
controllers.ASDocController = function(app) {
  app = typeof app !== 'undefined' ? app : null;
  if (app) {
    app.addEventListener("viewChanged", org.apache.royale.utils.Language.closure(this.viewChangeHandler, this, 'viewChangeHandler'));
  }
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('controllers.ASDocController', controllers.ASDocController);


/**
 * @private
 * @type {models.ASDocModel}
 */
controllers.ASDocController.prototype.model;


/**
 * @private
 * @type {ASDocMainView}
 */
controllers.ASDocController.prototype.mainView;


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
controllers.ASDocController.prototype.viewChangeHandler = function(event) {
  var /** @type {ASDoc} */ app = event.target;
  this.mainView = app.mainView;
  this.mainView.addEventListener("packageChanged", org.apache.royale.utils.Language.closure(this.packageChangedHandler, this, 'packageChangedHandler'));
  this.mainView.addEventListener("classChanged", org.apache.royale.utils.Language.closure(this.classChangedHandler, this, 'classChangedHandler'));
  this.mainView.addEventListener("addTag", org.apache.royale.utils.Language.closure(this.addTagHandler, this, 'addTagHandler'));
  this.mainView.addEventListener("removeTag", org.apache.royale.utils.Language.closure(this.removeTagHandler, this, 'removeTagHandler'));
  this.model = app.model;
};


/**
 * @private
 * @param {org.apache.royale.events.DetailEvent} event
 */
controllers.ASDocController.prototype.addTagHandler = function(event) {
  var /** @type {Array} */ tags = this.model.filterTags;
  if (!tags) {
    tags = [];
  }
  tags.push({name:event.detail});
  this.model.filterTags = tags;
};


/**
 * @private
 * @param {org.apache.royale.events.DetailEvent} event
 */
controllers.ASDocController.prototype.removeTagHandler = function(event) {
  var /** @type {Array} */ tags = this.model.filterTags;
  var /** @type {number} */ n = tags.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    if (tags[i].name == event.detail) {
      tags.splice(i, 1);
      break;
    }
  }
  if (tags.length == 0)
    this.model.filterTags = null;
  else
    this.model.filterTags = tags;
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
controllers.ASDocController.prototype.packageChangedHandler = function(event) {
  var /** @type {string} */ sym = this.mainView.currentPackage;
  this.model.currentPackage = sym;
};


/**
 * @private
 * @param {org.apache.royale.events.Event} event
 */
controllers.ASDocController.prototype.classChangedHandler = function(event) {
  var /** @type {string} */ sym = this.mainView.currentClass;
  this.model.currentClass = sym;
};


/**
 * @export
 * @param {Object} document
 * @param {string=} id
 */
controllers.ASDocController.prototype.setDocument = function(document, id) {
  id = typeof id !== 'undefined' ? id : null;
  var /** @type {org.apache.royale.core.Application} */ app = document;
  app.addEventListener("viewChanged", org.apache.royale.utils.Language.closure(this.viewChangeHandler, this, 'viewChangeHandler'));
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
controllers.ASDocController.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'ASDocController', qName: 'controllers.ASDocController', kind: 'class' }], interfaces: [org.apache.royale.core.IDocument] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
controllers.ASDocController.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {return {};},
    methods: function () {
      return {
        'ASDocController': { type: '', declaredBy: 'controllers.ASDocController', parameters: function () { return [  { index: 1, type: 'org.apache.royale.core.Application', optional: true } ]; }},
        'setDocument': { type: 'void', declaredBy: 'controllers.ASDocController', parameters: function () { return [  { index: 1, type: 'Object', optional: false },{ index: 2, type: 'String', optional: true } ]; }}
      };
    }
  };
};